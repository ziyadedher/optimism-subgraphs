// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class ERC20DepositInitiated extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save ERC20DepositInitiated entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type ERC20DepositInitiated must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("ERC20DepositInitiated", id.toString(), this);
    }
  }

  static load(id: string): ERC20DepositInitiated | null {
    return changetype<ERC20DepositInitiated | null>(
      store.get("ERC20DepositInitiated", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get _l1Token(): Bytes {
    let value = this.get("_l1Token");
    return value!.toBytes();
  }

  set _l1Token(value: Bytes) {
    this.set("_l1Token", Value.fromBytes(value));
  }

  get _l2Token(): Bytes {
    let value = this.get("_l2Token");
    return value!.toBytes();
  }

  set _l2Token(value: Bytes) {
    this.set("_l2Token", Value.fromBytes(value));
  }

  get _from(): Bytes {
    let value = this.get("_from");
    return value!.toBytes();
  }

  set _from(value: Bytes) {
    this.set("_from", Value.fromBytes(value));
  }

  get _to(): Bytes {
    let value = this.get("_to");
    return value!.toBytes();
  }

  set _to(value: Bytes) {
    this.set("_to", Value.fromBytes(value));
  }

  get _amount(): BigInt {
    let value = this.get("_amount");
    return value!.toBigInt();
  }

  set _amount(value: BigInt) {
    this.set("_amount", Value.fromBigInt(value));
  }

  get _data(): Bytes {
    let value = this.get("_data");
    return value!.toBytes();
  }

  set _data(value: Bytes) {
    this.set("_data", Value.fromBytes(value));
  }
}

export class ERC20WithdrawalFinalized extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save ERC20WithdrawalFinalized entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type ERC20WithdrawalFinalized must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("ERC20WithdrawalFinalized", id.toString(), this);
    }
  }

  static load(id: string): ERC20WithdrawalFinalized | null {
    return changetype<ERC20WithdrawalFinalized | null>(
      store.get("ERC20WithdrawalFinalized", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get _l1Token(): Bytes {
    let value = this.get("_l1Token");
    return value!.toBytes();
  }

  set _l1Token(value: Bytes) {
    this.set("_l1Token", Value.fromBytes(value));
  }

  get _l2Token(): Bytes {
    let value = this.get("_l2Token");
    return value!.toBytes();
  }

  set _l2Token(value: Bytes) {
    this.set("_l2Token", Value.fromBytes(value));
  }

  get _from(): Bytes {
    let value = this.get("_from");
    return value!.toBytes();
  }

  set _from(value: Bytes) {
    this.set("_from", Value.fromBytes(value));
  }

  get _to(): Bytes {
    let value = this.get("_to");
    return value!.toBytes();
  }

  set _to(value: Bytes) {
    this.set("_to", Value.fromBytes(value));
  }

  get _amount(): BigInt {
    let value = this.get("_amount");
    return value!.toBigInt();
  }

  set _amount(value: BigInt) {
    this.set("_amount", Value.fromBigInt(value));
  }

  get _data(): Bytes {
    let value = this.get("_data");
    return value!.toBytes();
  }

  set _data(value: Bytes) {
    this.set("_data", Value.fromBytes(value));
  }
}

export class ETHDepositInitiated extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save ETHDepositInitiated entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type ETHDepositInitiated must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("ETHDepositInitiated", id.toString(), this);
    }
  }

  static load(id: string): ETHDepositInitiated | null {
    return changetype<ETHDepositInitiated | null>(
      store.get("ETHDepositInitiated", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get _from(): Bytes {
    let value = this.get("_from");
    return value!.toBytes();
  }

  set _from(value: Bytes) {
    this.set("_from", Value.fromBytes(value));
  }

  get _to(): Bytes {
    let value = this.get("_to");
    return value!.toBytes();
  }

  set _to(value: Bytes) {
    this.set("_to", Value.fromBytes(value));
  }

  get _amount(): BigInt {
    let value = this.get("_amount");
    return value!.toBigInt();
  }

  set _amount(value: BigInt) {
    this.set("_amount", Value.fromBigInt(value));
  }

  get _data(): Bytes {
    let value = this.get("_data");
    return value!.toBytes();
  }

  set _data(value: Bytes) {
    this.set("_data", Value.fromBytes(value));
  }
}

export class ETHWithdrawalFinalized extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save ETHWithdrawalFinalized entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type ETHWithdrawalFinalized must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("ETHWithdrawalFinalized", id.toString(), this);
    }
  }

  static load(id: string): ETHWithdrawalFinalized | null {
    return changetype<ETHWithdrawalFinalized | null>(
      store.get("ETHWithdrawalFinalized", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get _from(): Bytes {
    let value = this.get("_from");
    return value!.toBytes();
  }

  set _from(value: Bytes) {
    this.set("_from", Value.fromBytes(value));
  }

  get _to(): Bytes {
    let value = this.get("_to");
    return value!.toBytes();
  }

  set _to(value: Bytes) {
    this.set("_to", Value.fromBytes(value));
  }

  get _amount(): BigInt {
    let value = this.get("_amount");
    return value!.toBigInt();
  }

  set _amount(value: BigInt) {
    this.set("_amount", Value.fromBigInt(value));
  }

  get _data(): Bytes {
    let value = this.get("_data");
    return value!.toBytes();
  }

  set _data(value: Bytes) {
    this.set("_data", Value.fromBytes(value));
  }
}
