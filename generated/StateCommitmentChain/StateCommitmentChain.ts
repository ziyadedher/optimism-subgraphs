// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class StateBatchAppended extends ethereum.Event {
  get params(): StateBatchAppended__Params {
    return new StateBatchAppended__Params(this);
  }
}

export class StateBatchAppended__Params {
  _event: StateBatchAppended;

  constructor(event: StateBatchAppended) {
    this._event = event;
  }

  get _batchIndex(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get _batchRoot(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }

  get _batchSize(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get _prevTotalElements(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get _extraData(): Bytes {
    return this._event.parameters[4].value.toBytes();
  }
}

export class StateBatchDeleted extends ethereum.Event {
  get params(): StateBatchDeleted__Params {
    return new StateBatchDeleted__Params(this);
  }
}

export class StateBatchDeleted__Params {
  _event: StateBatchDeleted;

  constructor(event: StateBatchDeleted) {
    this._event = event;
  }

  get _batchIndex(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get _batchRoot(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }
}

export class StateCommitmentChain__insideFraudProofWindowInput_batchHeaderStruct extends ethereum.Tuple {
  get batchIndex(): BigInt {
    return this[0].toBigInt();
  }

  get batchRoot(): Bytes {
    return this[1].toBytes();
  }

  get batchSize(): BigInt {
    return this[2].toBigInt();
  }

  get prevTotalElements(): BigInt {
    return this[3].toBigInt();
  }

  get extraData(): Bytes {
    return this[4].toBytes();
  }
}

export class StateCommitmentChain__verifyStateCommitmentInput_batchHeaderStruct extends ethereum.Tuple {
  get batchIndex(): BigInt {
    return this[0].toBigInt();
  }

  get batchRoot(): Bytes {
    return this[1].toBytes();
  }

  get batchSize(): BigInt {
    return this[2].toBigInt();
  }

  get prevTotalElements(): BigInt {
    return this[3].toBigInt();
  }

  get extraData(): Bytes {
    return this[4].toBytes();
  }
}

export class StateCommitmentChain__verifyStateCommitmentInput_proofStruct extends ethereum.Tuple {
  get index(): BigInt {
    return this[0].toBigInt();
  }

  get siblings(): Array<Bytes> {
    return this[1].toBytesArray();
  }
}

export class StateCommitmentChain extends ethereum.SmartContract {
  static bind(address: Address): StateCommitmentChain {
    return new StateCommitmentChain("StateCommitmentChain", address);
  }

  FRAUD_PROOF_WINDOW(): BigInt {
    let result = super.call(
      "FRAUD_PROOF_WINDOW",
      "FRAUD_PROOF_WINDOW():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_FRAUD_PROOF_WINDOW(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "FRAUD_PROOF_WINDOW",
      "FRAUD_PROOF_WINDOW():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  SEQUENCER_PUBLISH_WINDOW(): BigInt {
    let result = super.call(
      "SEQUENCER_PUBLISH_WINDOW",
      "SEQUENCER_PUBLISH_WINDOW():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_SEQUENCER_PUBLISH_WINDOW(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "SEQUENCER_PUBLISH_WINDOW",
      "SEQUENCER_PUBLISH_WINDOW():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  batches(): Address {
    let result = super.call("batches", "batches():(address)", []);

    return result[0].toAddress();
  }

  try_batches(): ethereum.CallResult<Address> {
    let result = super.tryCall("batches", "batches():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getLastSequencerTimestamp(): BigInt {
    let result = super.call(
      "getLastSequencerTimestamp",
      "getLastSequencerTimestamp():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getLastSequencerTimestamp(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getLastSequencerTimestamp",
      "getLastSequencerTimestamp():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getTotalBatches(): BigInt {
    let result = super.call(
      "getTotalBatches",
      "getTotalBatches():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getTotalBatches(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getTotalBatches",
      "getTotalBatches():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getTotalElements(): BigInt {
    let result = super.call(
      "getTotalElements",
      "getTotalElements():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getTotalElements(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getTotalElements",
      "getTotalElements():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  insideFraudProofWindow(
    _batchHeader: StateCommitmentChain__insideFraudProofWindowInput_batchHeaderStruct
  ): boolean {
    let result = super.call(
      "insideFraudProofWindow",
      "insideFraudProofWindow((uint256,bytes32,uint256,uint256,bytes)):(bool)",
      [ethereum.Value.fromTuple(_batchHeader)]
    );

    return result[0].toBoolean();
  }

  try_insideFraudProofWindow(
    _batchHeader: StateCommitmentChain__insideFraudProofWindowInput_batchHeaderStruct
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "insideFraudProofWindow",
      "insideFraudProofWindow((uint256,bytes32,uint256,uint256,bytes)):(bool)",
      [ethereum.Value.fromTuple(_batchHeader)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  libAddressManager(): Address {
    let result = super.call(
      "libAddressManager",
      "libAddressManager():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_libAddressManager(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "libAddressManager",
      "libAddressManager():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  resolve(_name: string): Address {
    let result = super.call("resolve", "resolve(string):(address)", [
      ethereum.Value.fromString(_name)
    ]);

    return result[0].toAddress();
  }

  try_resolve(_name: string): ethereum.CallResult<Address> {
    let result = super.tryCall("resolve", "resolve(string):(address)", [
      ethereum.Value.fromString(_name)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  verifyStateCommitment(
    _element: Bytes,
    _batchHeader: StateCommitmentChain__verifyStateCommitmentInput_batchHeaderStruct,
    _proof: StateCommitmentChain__verifyStateCommitmentInput_proofStruct
  ): boolean {
    let result = super.call(
      "verifyStateCommitment",
      "verifyStateCommitment(bytes32,(uint256,bytes32,uint256,uint256,bytes),(uint256,bytes32[])):(bool)",
      [
        ethereum.Value.fromFixedBytes(_element),
        ethereum.Value.fromTuple(_batchHeader),
        ethereum.Value.fromTuple(_proof)
      ]
    );

    return result[0].toBoolean();
  }

  try_verifyStateCommitment(
    _element: Bytes,
    _batchHeader: StateCommitmentChain__verifyStateCommitmentInput_batchHeaderStruct,
    _proof: StateCommitmentChain__verifyStateCommitmentInput_proofStruct
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "verifyStateCommitment",
      "verifyStateCommitment(bytes32,(uint256,bytes32,uint256,uint256,bytes),(uint256,bytes32[])):(bool)",
      [
        ethereum.Value.fromFixedBytes(_element),
        ethereum.Value.fromTuple(_batchHeader),
        ethereum.Value.fromTuple(_proof)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _libAddressManager(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _fraudProofWindow(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _sequencerPublishWindow(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class AppendStateBatchCall extends ethereum.Call {
  get inputs(): AppendStateBatchCall__Inputs {
    return new AppendStateBatchCall__Inputs(this);
  }

  get outputs(): AppendStateBatchCall__Outputs {
    return new AppendStateBatchCall__Outputs(this);
  }
}

export class AppendStateBatchCall__Inputs {
  _call: AppendStateBatchCall;

  constructor(call: AppendStateBatchCall) {
    this._call = call;
  }

  get _batch(): Array<Bytes> {
    return this._call.inputValues[0].value.toBytesArray();
  }

  get _shouldStartAtElement(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class AppendStateBatchCall__Outputs {
  _call: AppendStateBatchCall;

  constructor(call: AppendStateBatchCall) {
    this._call = call;
  }
}

export class DeleteStateBatchCall extends ethereum.Call {
  get inputs(): DeleteStateBatchCall__Inputs {
    return new DeleteStateBatchCall__Inputs(this);
  }

  get outputs(): DeleteStateBatchCall__Outputs {
    return new DeleteStateBatchCall__Outputs(this);
  }
}

export class DeleteStateBatchCall__Inputs {
  _call: DeleteStateBatchCall;

  constructor(call: DeleteStateBatchCall) {
    this._call = call;
  }

  get _batchHeader(): DeleteStateBatchCall_batchHeaderStruct {
    return changetype<DeleteStateBatchCall_batchHeaderStruct>(
      this._call.inputValues[0].value.toTuple()
    );
  }
}

export class DeleteStateBatchCall__Outputs {
  _call: DeleteStateBatchCall;

  constructor(call: DeleteStateBatchCall) {
    this._call = call;
  }
}

export class DeleteStateBatchCall_batchHeaderStruct extends ethereum.Tuple {
  get batchIndex(): BigInt {
    return this[0].toBigInt();
  }

  get batchRoot(): Bytes {
    return this[1].toBytes();
  }

  get batchSize(): BigInt {
    return this[2].toBigInt();
  }

  get prevTotalElements(): BigInt {
    return this[3].toBigInt();
  }

  get extraData(): Bytes {
    return this[4].toBytes();
  }
}
