// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class L2GasParamsUpdated extends ethereum.Event {
  get params(): L2GasParamsUpdated__Params {
    return new L2GasParamsUpdated__Params(this);
  }
}

export class L2GasParamsUpdated__Params {
  _event: L2GasParamsUpdated;

  constructor(event: L2GasParamsUpdated) {
    this._event = event;
  }

  get l2GasDiscountDivisor(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get enqueueGasCost(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get enqueueL2GasPrepaid(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class QueueBatchAppended extends ethereum.Event {
  get params(): QueueBatchAppended__Params {
    return new QueueBatchAppended__Params(this);
  }
}

export class QueueBatchAppended__Params {
  _event: QueueBatchAppended;

  constructor(event: QueueBatchAppended) {
    this._event = event;
  }

  get _startingQueueIndex(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get _numQueueElements(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get _totalElements(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class SequencerBatchAppended extends ethereum.Event {
  get params(): SequencerBatchAppended__Params {
    return new SequencerBatchAppended__Params(this);
  }
}

export class SequencerBatchAppended__Params {
  _event: SequencerBatchAppended;

  constructor(event: SequencerBatchAppended) {
    this._event = event;
  }

  get _startingQueueIndex(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get _numQueueElements(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get _totalElements(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class TransactionBatchAppended extends ethereum.Event {
  get params(): TransactionBatchAppended__Params {
    return new TransactionBatchAppended__Params(this);
  }
}

export class TransactionBatchAppended__Params {
  _event: TransactionBatchAppended;

  constructor(event: TransactionBatchAppended) {
    this._event = event;
  }

  get _batchIndex(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get _batchRoot(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }

  get _batchSize(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get _prevTotalElements(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get _extraData(): Bytes {
    return this._event.parameters[4].value.toBytes();
  }
}

export class TransactionEnqueued extends ethereum.Event {
  get params(): TransactionEnqueued__Params {
    return new TransactionEnqueued__Params(this);
  }
}

export class TransactionEnqueued__Params {
  _event: TransactionEnqueued;

  constructor(event: TransactionEnqueued) {
    this._event = event;
  }

  get _l1TxOrigin(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get _target(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get _gasLimit(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get _data(): Bytes {
    return this._event.parameters[3].value.toBytes();
  }

  get _queueIndex(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get _timestamp(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }
}

export class CanonicalTransactionChain__getQueueElementResult_elementStruct extends ethereum.Tuple {
  get transactionHash(): Bytes {
    return this[0].toBytes();
  }

  get timestamp(): BigInt {
    return this[1].toBigInt();
  }

  get blockNumber(): BigInt {
    return this[2].toBigInt();
  }
}

export class CanonicalTransactionChain extends ethereum.SmartContract {
  static bind(address: Address): CanonicalTransactionChain {
    return new CanonicalTransactionChain("CanonicalTransactionChain", address);
  }

  MAX_ROLLUP_TX_SIZE(): BigInt {
    let result = super.call(
      "MAX_ROLLUP_TX_SIZE",
      "MAX_ROLLUP_TX_SIZE():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_MAX_ROLLUP_TX_SIZE(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "MAX_ROLLUP_TX_SIZE",
      "MAX_ROLLUP_TX_SIZE():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  MIN_ROLLUP_TX_GAS(): BigInt {
    let result = super.call(
      "MIN_ROLLUP_TX_GAS",
      "MIN_ROLLUP_TX_GAS():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_MIN_ROLLUP_TX_GAS(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "MIN_ROLLUP_TX_GAS",
      "MIN_ROLLUP_TX_GAS():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  batches(): Address {
    let result = super.call("batches", "batches():(address)", []);

    return result[0].toAddress();
  }

  try_batches(): ethereum.CallResult<Address> {
    let result = super.tryCall("batches", "batches():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  enqueueGasCost(): BigInt {
    let result = super.call("enqueueGasCost", "enqueueGasCost():(uint256)", []);

    return result[0].toBigInt();
  }

  try_enqueueGasCost(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "enqueueGasCost",
      "enqueueGasCost():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  enqueueL2GasPrepaid(): BigInt {
    let result = super.call(
      "enqueueL2GasPrepaid",
      "enqueueL2GasPrepaid():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_enqueueL2GasPrepaid(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "enqueueL2GasPrepaid",
      "enqueueL2GasPrepaid():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getLastBlockNumber(): BigInt {
    let result = super.call(
      "getLastBlockNumber",
      "getLastBlockNumber():(uint40)",
      []
    );

    return result[0].toBigInt();
  }

  try_getLastBlockNumber(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getLastBlockNumber",
      "getLastBlockNumber():(uint40)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getLastTimestamp(): BigInt {
    let result = super.call(
      "getLastTimestamp",
      "getLastTimestamp():(uint40)",
      []
    );

    return result[0].toBigInt();
  }

  try_getLastTimestamp(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getLastTimestamp",
      "getLastTimestamp():(uint40)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getNextQueueIndex(): BigInt {
    let result = super.call(
      "getNextQueueIndex",
      "getNextQueueIndex():(uint40)",
      []
    );

    return result[0].toBigInt();
  }

  try_getNextQueueIndex(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getNextQueueIndex",
      "getNextQueueIndex():(uint40)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getNumPendingQueueElements(): BigInt {
    let result = super.call(
      "getNumPendingQueueElements",
      "getNumPendingQueueElements():(uint40)",
      []
    );

    return result[0].toBigInt();
  }

  try_getNumPendingQueueElements(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getNumPendingQueueElements",
      "getNumPendingQueueElements():(uint40)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getQueueElement(
    _index: BigInt
  ): CanonicalTransactionChain__getQueueElementResult_elementStruct {
    let result = super.call(
      "getQueueElement",
      "getQueueElement(uint256):((bytes32,uint40,uint40))",
      [ethereum.Value.fromUnsignedBigInt(_index)]
    );

    return changetype<
      CanonicalTransactionChain__getQueueElementResult_elementStruct
    >(result[0].toTuple());
  }

  try_getQueueElement(
    _index: BigInt
  ): ethereum.CallResult<
    CanonicalTransactionChain__getQueueElementResult_elementStruct
  > {
    let result = super.tryCall(
      "getQueueElement",
      "getQueueElement(uint256):((bytes32,uint40,uint40))",
      [ethereum.Value.fromUnsignedBigInt(_index)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<
        CanonicalTransactionChain__getQueueElementResult_elementStruct
      >(value[0].toTuple())
    );
  }

  getQueueLength(): BigInt {
    let result = super.call("getQueueLength", "getQueueLength():(uint40)", []);

    return result[0].toBigInt();
  }

  try_getQueueLength(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getQueueLength",
      "getQueueLength():(uint40)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getTotalBatches(): BigInt {
    let result = super.call(
      "getTotalBatches",
      "getTotalBatches():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getTotalBatches(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getTotalBatches",
      "getTotalBatches():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getTotalElements(): BigInt {
    let result = super.call(
      "getTotalElements",
      "getTotalElements():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getTotalElements(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getTotalElements",
      "getTotalElements():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  l2GasDiscountDivisor(): BigInt {
    let result = super.call(
      "l2GasDiscountDivisor",
      "l2GasDiscountDivisor():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_l2GasDiscountDivisor(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "l2GasDiscountDivisor",
      "l2GasDiscountDivisor():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  libAddressManager(): Address {
    let result = super.call(
      "libAddressManager",
      "libAddressManager():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_libAddressManager(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "libAddressManager",
      "libAddressManager():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  maxTransactionGasLimit(): BigInt {
    let result = super.call(
      "maxTransactionGasLimit",
      "maxTransactionGasLimit():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_maxTransactionGasLimit(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "maxTransactionGasLimit",
      "maxTransactionGasLimit():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  resolve(_name: string): Address {
    let result = super.call("resolve", "resolve(string):(address)", [
      ethereum.Value.fromString(_name)
    ]);

    return result[0].toAddress();
  }

  try_resolve(_name: string): ethereum.CallResult<Address> {
    let result = super.tryCall("resolve", "resolve(string):(address)", [
      ethereum.Value.fromString(_name)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _libAddressManager(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _maxTransactionGasLimit(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _l2GasDiscountDivisor(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _enqueueGasCost(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class AppendSequencerBatchCall extends ethereum.Call {
  get inputs(): AppendSequencerBatchCall__Inputs {
    return new AppendSequencerBatchCall__Inputs(this);
  }

  get outputs(): AppendSequencerBatchCall__Outputs {
    return new AppendSequencerBatchCall__Outputs(this);
  }
}

export class AppendSequencerBatchCall__Inputs {
  _call: AppendSequencerBatchCall;

  constructor(call: AppendSequencerBatchCall) {
    this._call = call;
  }
}

export class AppendSequencerBatchCall__Outputs {
  _call: AppendSequencerBatchCall;

  constructor(call: AppendSequencerBatchCall) {
    this._call = call;
  }
}

export class EnqueueCall extends ethereum.Call {
  get inputs(): EnqueueCall__Inputs {
    return new EnqueueCall__Inputs(this);
  }

  get outputs(): EnqueueCall__Outputs {
    return new EnqueueCall__Outputs(this);
  }
}

export class EnqueueCall__Inputs {
  _call: EnqueueCall;

  constructor(call: EnqueueCall) {
    this._call = call;
  }

  get _target(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _gasLimit(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _data(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }
}

export class EnqueueCall__Outputs {
  _call: EnqueueCall;

  constructor(call: EnqueueCall) {
    this._call = call;
  }
}

export class SetGasParamsCall extends ethereum.Call {
  get inputs(): SetGasParamsCall__Inputs {
    return new SetGasParamsCall__Inputs(this);
  }

  get outputs(): SetGasParamsCall__Outputs {
    return new SetGasParamsCall__Outputs(this);
  }
}

export class SetGasParamsCall__Inputs {
  _call: SetGasParamsCall;

  constructor(call: SetGasParamsCall) {
    this._call = call;
  }

  get _l2GasDiscountDivisor(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _enqueueGasCost(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class SetGasParamsCall__Outputs {
  _call: SetGasParamsCall;

  constructor(call: SetGasParamsCall) {
    this._call = call;
  }
}
